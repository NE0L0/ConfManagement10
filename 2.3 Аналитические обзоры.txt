Процесс статистического анализа определяет содержание и порядок деятельности по преобразованию данных первичных измерений параметров продукции и процессов жизненного цикла в информацию по уменьшению вариабельности.

Проблема отчуждаемости критического ПО.
В общем случае критическое ПО может быть отнесено к одному из двух типов:
а) Автономный комплекс ПО, реализующий критические функции (standalone critical SW)
б) ПО информационно-управляющих систем (ИУС) критического применения (SW critical I&C system)
Риски связанные с безопасностью критического ПО всегда оцениваются на системном уровне в контексте использования ИУС, функциональность которой реализуется с использованием ПО, или автономного программного комплекса.
Необходимым условием для проведения анализа критичности ПО и управления рисками его использования по назначению является реализация при проектировании свойства отчуждаемость. Это означает наличие технической (программной) документации, обеспечивающей объективную возможность проведения анализа и испытаний критического ПО при независимой верификации, сертификации, аттестации и сопровождении его в эксплуатации.
К числу важнейших характеристик, определяющих качество критического ПО наряду с Функциональной и Информационной безопасностью (Safety, Security) относится характеристикаГарантоспособность (Dependability). В общем случае Гарантоспособность основывается на методах достижения бездефектности, включая предупреждение дефектов при проектировании, обнаружение, диагностирование и «извлечение дефектов» (коррекции ПО) при тестировании и парирование оставшихся скрытых дефектов при использовании критического ПО на основе реализации принципа разнообразия (многоверсионности).
Оценка (прогноз) вероятности существования скрытых (латентных) дефектов критического ПО является исходной позицией для определения характеристик Гарантоспособность и Безопасность критического ПО.
Именно необходимость достижения упомянутых выше показателей при разработке критического ПО определяет специфические задачи и особенности технологий критической ПИ. Специфическим требованием к таким технологиям является достижение предельно-возможных значений бездефектности в результате верификации, валидации и квалификационных испытаний критического ПО. Риски ущерба из-за скрытых дефектов критического ПО могут быть неприемлемо высокими.
К числу таких технологий, например, относятся методы Model Checking верификации (верификации моделей ПО), использующие темпоральную логику ПО и модифицированный метод полимодельной Model Checking верификации, основанный на использовании класса инварианто-ориентированных моделей критического ПО.
Вывод: Оценка вероятности существования скрытых дефектов критического ПО является исходной позицией для определения характеристик гарантоспособности и безопасности критического ПО.

Перспективы использования статического анализа текстов ПО. 
Основной проблемой использования статического анализа текстов ПО является растущая сложность создания и апробации новых техник верификации. Все необходимое для их работы окружение — инструменты анализа исходного кода, описания формальных моделей, библиотеки дляработы с внутренним представлением моделей и кода, инструменты, реализующие различные виды анализа кода и моделей, средства получения отчетов — невозможно разработать заново. Исследователю для проверки работоспособности его идеи приходится на скорую руку собирать это окружение из разнородных компонентов и библиотек, которые можно найти в свободном доступе. В лучшем случае удается создать прототип, который способен справиться с парой нужных примеров. Но таким способом невозможно создать среду, в рамках которой можно было бы проанализировать работоспособность и эффективность новой идеи в широком множестве разнообразных ситуаций, на разных видах приложений и требований к ним. Поэтому большинство новых идей применяются лишь в «тепличных условиях», а эффекты от их применения в широком контексте остаются неясными и непредсказуемыми.
Решением для упомянутых проблем могла бы стать унифицированная расширяемая среда верификации программных систем, предоставляющая общее окружение для решения задач верификации и библиотеки готовых компонентов, реализующих типовые техники. Такая среда могла бы существенно упростить интеграцию модулей, реализующих различные техники верификации, за счет унифицированных интерфейсов ее расширения.
Исследователи могли бы использовать ее для значительного снижения затрат на апробацию новых методов и анализ их работоспособности в разнообразных ситуациях. Промышленные разработчики — для интеграции нужного им набора техник в рамках единого инструмента и эффективного внедрения их в практическое использование.
Подтверждением работоспособности и эффективности интеграции различных методов верификации ПО в разнообразных ситуациях являются многочисленные синтетические методы верификации.
Вывод: Решением проблемы возрастания растущих сложностей создания новых техник верификации является  унифицированная расширяемая среда верификации программных систем, предоставляющая общее окружение для решения задач верификации и библиотеки готовых компонентов, реализующих типовые техники. Такая среда могла бысущественно упростить интеграцию модулей, реализующих различные техники верификации, за счет унифицированных интерфейсов ее расширения.


Формальные методы анализа и верификации критического ПО на основе статического анализа.
Статический анализ предполагает построение некоторых моделей кода проверяемой системы, чаще всего, в виде размеченных графов потоков управления и данных, и анализ свойств этих моделей, например, поиск ошибок определенного рода по соответствующим им шаблонам в потоках данных. Сейчас все чаще используются специфические виды статического анализа, в рамках которых находят применения формальные модели и специализированные инструменты разрешения ограничений.
Расширенный статический анализ (extended static checking) проверяет соответствие кода ПО требованиям, обычно записываемым тоже в коде в виде комментариев к его отдельным элементам (процедурам, типам данных и методам классов). При этом на основе результатов анализа кода автоматически строятся формальные модели его поведения, выполнение требований для которых проверяется чаще всего с помощью дедуктивного анализа и специализированных решателей (solvers).
Статический анализ на базе автоматической абстракции. В рамках такого подхода на основе результатов статического анализа кода автоматически строятся более абстрактные, а потому более простые модели работы проверяемого ПО, которые затем подвергаются проверке на выполнение определенных свойств с помощью инструментов проверки моделей или решателей. Обычно проверяемые свойства фиксированы для данного инструмента или формулируются в конфигурационном файле. При нарушении требования в модели инструменты этого типа пытаются построить соответствующий сценарий работы кода. Если это не получается из-за упрощений, сделанных при построении модели, определяются элементы кода, препятствующие выполнению такого сценария, и в модель вносятся уточнения, более аккуратно описывающие работу именно этих элементов, после уточненная модель снова проверяется на выполнение заданного свойства. В итоге инструмент либо подтверждаетвыполнение требований, либо находит контрпример, либо завершает работу по истечении некоторого времени или из-за исчерпания ресурсов, не приходя к определенным выводам.
Синтетическое структурное тестирование при котором после первого случайно выбранного теста остальные тесты генерируются автоматически так, чтобы обеспечить покрытие еще не покрытых ранее элементов кода. Для выбора подходящих тестовых данных используются решатели, учитывающие символическую информацию о ранее выполненных тестах (ограничения на данные, отделяющие прошедшие тесты от еще не покрытого кода), а для построения нужных последовательностей воздействий — случайная генерация, направляемая как этой же символической информацией, так и некоторыми эвристическими абстракциями, уменьшающими пространство состояний проверяемой системы. Тестирование на основе моделей (model based testing)  сочетает разработку формальных моделей требований к проверяемому ПО и построение тестов на базе этих моделей. Структура модели при этом служит основой для критерия полноты тестирования, а ограничения модели на корректные результаты работы ПО используются в качестве тестовых оракулов, оценивающих правильность поведения ПО в ходе тестирования. 
В рамках последних двух подходов (или отдельно от них) применяются специфические техники построения тестов, сами по себе сочетающие разные методы верификации.
Построение тестов с помощью разрешения ограничений. Часто при разработке тестов на основе критериев полноты тестирования формулируются так называемые цели тестирования (test objectives), представляющие собой специфические ситуации, в которых необходимо проверить поведение тестируемой системы для достижения необходимой уверенности в ее корректной работе. Цель тестирования формулируется как набор ограничений на проходимые во время теста состояния системы и данные выполняемых воздействий. Для построения теста, достигающего такую цель, можно использовать специализированные решатели (solvers). Такой решатель либо автоматически находит необходимые данные и последовательность вызовов операцийкак решение заданной системы ограничений, либо показывает, что эта система неразрешима, т.е. заданная цель тестирования недостижима и строить нацеленные на нее тесты не имеет смысла.
Построение тестов как контрпримеров с помощью инструментов проверки моделей. Другой способ построения тестов — сформулировать отрицание ограничений, задающих цель тестирования, как свойство, которое можно проверить или опровергнуть с помощью инструмента проверки моделей. Если это свойство подтверждается, значит, цель тестирования недостижима, если же оно опровергается, то инструмент строит контрпример, являющийся в данном случае необходимым тестом.
Мониторинг формальных свойств (runtime verification, passive testing) тоже использует формальные модели требований для оценки правильности поведения проверяемой системы, но только в ходе ее обычной работы, без использования специально построенных тестов.
Как видно, все синтетические методы так или иначе пытаются соединить достоинства различных подходов к верификации, купируя их недостатки. В настоящее время достигнуты значительные успехи в разработке таких методов и внедрении их в практику промышленной разработки ПО, например, в следующих случаях.
Многочисленные проекты NASA по разработке ПО управления для космических спутников, челноков и специализированных исследовательских аппаратов, проводимые с использованием инструментов проверки моделей, генерации тестов на их основе и мониторинга. Из используемых в этих проектах инструментах наиболее известны инструменты проверки моделей Spin, генератор тестов T-VEC  и инструмент символического выполнения Java PathFinder, используемый для проверки свойств Java программ, их мониторинга и тестирования.
Создание и использование в Microsoft инструмента Static Driver Verifier, использующего статический анализ с автоматической абстракций для проверки корректности работы драйверов Windows. Сначала в проекте использовался инструмент проверки моделей SLAM, который затем был значительно доработан и дополнен возможностями анализа произвольного кода наязыке C и автоматической абстракции, направляемой контрпримерами.
Внутренний проект Microsoft по проведению формальной спецификации и генерации тестовых наборов для разнообразных клиент-серверных протоколов, используемых в продуктах этой компании. В рамках этого проекта используется, в основном, инструмент SpecExplorer, разработанный в Microsoft Research, а объем работ по анализу и формализации документации на протоколы оценивается в несколько десятков человеко-лет.
Проводившиеся и идущие в настоящее время в ИСП РАН проекты по созданию тестов на основе формальных моделей базовых библиотек операционных систем, телекоммуникационных протоколов семейства IPv6, оптимизирующих блоков компиляторов, использующие семейство инструментов тестирования на основе моделей UniTESK.
Использование формальных методов верификации и инструментов расширенного статического анализа при создании систем авионики в Airbus и Boeing . В частности, в Airbus использовался инструмент статического анализа на основе формальных моделей ASTREE.
Использование формальных методов, тестирования на основе моделей и средств мониторинга при разработке ПО для смарт-карт.
Все эти примеры подтверждают эффективность интеграции различных вери-фикационных методов на практике. Тем не менее, несмотря на достигнутые успехи, каждый из имеющихся синтетических подходов использует лишь часть имеющегося потенциала и не предоставляет единой среды интеграции для всего многообразия различных техник верификации ПО.

Вывод: Существуют такие методы анализа и верификации критического ПО на основе статического анализа: расширенный статический анализ, статический анализ на базе автоматической абстракции, построение тестов с помощью разрешения ограничений, построение тестов как контрпримеров с помощью инструментов проверки моделей, мониторинг формальных свойств.

Полимодельная Model-checking верификация с использованием инварианто-ориентированных моделей критического ПО. На основе статического анализа исходных текстов ПО.
Именно необходимость достижения показателей, какгарантоспособность и безопасность, при разработке критического ПО определяет специфические задачи и особенности технологий критической ПО. Специфическим требованием к таким технологиям является достижение предельно-возможных значений бездефектности в результате верификации, валидации и квалификационных испытаний критического ПО. В силу того, что риски ущерба из-за скрытых дефектов критического ПО могут быть неприемлемо высокими.
К числу таких технологий, например, относятся методы Model Checking верификации (верификации моделей ПО), использующие темпоральную логику ПО и модифицированный метод полимодельной Model Checking верификации, основанный на использовании класса инварианто-ориентированных моделей критического ПО.
Проверка моделей (проверка на модели, англ. model checking) — метод автоматической формальной верификации параллельных систем с конечным числом состояний. Позволяет проверить удовлетворяет ли заданная модель системы формальным спецификациям.
В качестве модели обычно используется так называемая модель Крипке. 
Модель Крипке (англ. Kripke structure) — это один из вариантов недетерминированного конечного автомата, который был предложен Солом Крипке. Этот вид НКА применяется при проверке моделeй для представления поведения системы.
Модель Крипке является простой абстрактной машиной, позволяющей описать идеи вычислительной машины без добавления особых сложностей. Модель представляется ориентированным графом, вершины которого описывают достижимые состояния системы, а ребра — переходы из состояния в состояние.
Обычно спецификации задаются на языке формальной логики. Для спецификации аппаратного и программного обеспечения, как правило, применяют темпоральную логику — специальный язык, позволяющий описывать поведение системы во времени.
Важным вопросом спецификации является полнота. Метод проверки на модели позволяет убедиться, что модель проектируемой системы соответствует заданной спецификации, однако определить, охватывает ли заданная спецификация все свойства, которым должна удовлетворять система,невозможно.
Основная трудность, которую приходится преодолевать в ходе проверки на модели, связана с эффектом комбинаторного взрыва в пространстве состояний. Эта проблема возникает в системах, состоящих из многих компонентов, взаимодействующих друг с другом, а также в системах, обладающих структурами данных, способных принимать большое число значений.
Вывод: Для выявления скрытых дефектов критического ПО применяют методы Model Checking верификации, использующие темпоральную логику ПО и модифицированный метод полимодельной Model Checking верификации.
Выводы
В ходе выполнения задания была проанализирована роль статического анализ в инженерии критического ПО, а также цели, возможности и ограничения статического анализа исходного кода ПО. Было выявлено, что возможность получить предупреждение о вероятной ошибке в конкретных строках кода заблаговременно очень полезна, исходя из современных среднестатистических размеров проекта. Инструмент статического анализа, возможно, не даст абсолютной уверенности, но, работая в реальном времени, он обеспечивает мгновенную обратную связь, указывая на то, что может быть ошибочно в реализации. Также некоторые статические анализаторы позволяют проверять, соответствует ли исходный код, принятому в компании стандарту оформления кода. Главное преимущество статического анализ состоит в возможности существенной снижении стоимости устранения дефектов в программе. Статический анализатор очень эффективен при написании программ на языках высокого уровня, так как позволяет осуществлять синтаксический разбор кода программы. В ходе синтаксического анализа исходный текст преобразуется в структуру данных, обычно — в дерево, которое отражает синтаксическую структуру входной последовательности и хорошо подходит для дальнейшей обработки. Задача синтаксического анализатора – проверить правильность записи выражения и разбить его на лексемы.
Решением проблемы возрастания растущих сложностей создания новых техник верификации является  унифицированная расширяемая среда верификации программных систем,предоставляющая общее окружение для решения задач верификации и библиотеки готовых компонентов, реализующих типовые техники. Такая среда могла бы существенно упростить интеграцию модулей, реализующих различные техники верификации, за счет унифицированных интерфейсов ее расширения.
Статический анализ является эффективным методом достижения гарантоспособности и безопасности критиеского ПО.
Необходимость достижения показателей, как гарантоспасобность и безопасность, при разработке критического ПО определяет специфические задачи и особенности технологий критической ПИ. Специфическим требованием к таким технологиям является достижение предельно-возможных значений бездефектности в результате верификации, валидации и квалификационных испытаний критического ПО. Риски ущерба из-за скрытых дефектов критического ПО могут быть неприемлемо высокими.
К числу таких технологий относятся методы Model Checking верификации, использующие темпоральную логику ПО и модифицированный метод полимодельной Model Checking верификации, основанный на использовании класса инварианто-ориентированных моделей критического ПО.