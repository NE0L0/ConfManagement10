Введение

Одной из важнейших проблем при проектировании и разработке программного
обеспечения (ПО) является его верификация. Методы верификации программного
обеспечения предназначены для подтверждения фактов соответствия конечного
программного продукта заявленным требованиям, целью верификации программного
обеспечения является обнаружение ошибок, уязвимостей, некорректно реализованных
свойств и требований. Проблема создания новой классификации методов верификации
ПО является актуальной, так как позволяет рассмотреть существующие на данные момент
методы верификации ПО и их программную реализацию, выявить их преимущества и
недостатки. Классификация и исследование существующих методовпозволяет составить
список требований и рекомендаций для дальнейшей разработки и исследования
синтетического метода верификации ПО, на основе SMT – решателя.
Существующие методы верификации ПО можно разделить на эмпирические
(использующие экспертизу), формальные (использующие математический аппарат для
верификации программного обеспечения) и динамические (проверяющие работу
программной реализации с помощью непосредственного запуска), а с точки зрения уровня
автоматизации на ручные, автоматизированные и автоматические

Одним из важных этапов верификации ПО является проверка ПО на соответствие
заявленным качественным характеристикам. Наиболее важные характеристики
программного обеспечения приведены ниже:
- корректность (соответствие системы своему предназначению);
- безопасность системы;
- устойчивость системы в случае недетерминированного поведения окружения
(например, неверные входные данные);
- эффективность использования ресурсов времени и памяти;
- адаптируемость системы к небольшим изменениям окружения;
- переносимость и совместимость

Существует множество методов верификации ПО, одним из которых является статический анализ ПО

Статический анализ программного обеспечения

Статический анализ программы – это анализ который выполняется без
фактического выполнения программы (анализ, проведенный при выполнении ПО известен
как динамический анализ). В большинстве случаев анализируется некоторая версия
исходного кода. В отличие от динамического анализа, статический анализ позволяет
проанализировать все возможные пути выполнения программы. Этот термин обычно
используется в случае, когда анализ производится с помощью автоматизированных
инструментов.
На данный момент наибольшее распространение получили две группы методов
статической верификации: методы дедуктивного анализа программ и методы проверки
моделей. Методы дедуктивного анализа используются для доказательства
соответствия программы своей спецификации, обычно задаваемой в виде пред и
постусловий. На текущем уровне развития эти инструменты не применимы для анализа
больших программ, так как требуют ручной аннотации функций и циклов в тексте
программы. Методы проверки моделей (model checking) исходя из кода программы
формируют её математическую модель, обычно в качестве модели используется модель
Крипке, далее проводят анализ этой модели на предмет выполнения установленных
условий и ограничений.
При верификации методом проверки модели, анализируется не сама программа, а ее
математическая модель, точность и полнота анализа зависит от того, на сколько
адекватной является построенная математическая модель программы.
При статической верификации происходит разбор текста программы, в ее
внутреннее представление, в результате которого строится граф потока управления.
Генерация внутреннего представления программы происходит в процессе
синтаксического анализа и позволяет сохранить ее исходную синтаксическую структур.
Вершины графа соответствуют операторам, в тексте программы, а ребра
ассоциируются с передачей потока управления

Статический анализ может быть двух видов:
- Проверка правил корректности;
- Поиск дефектов по шаблонам.
Методы статического анализа обладают высокой степенью автоматизации, это
позволяет возложить задачи верификации ПО на инструменты анализа. Статический
анализ обеспечивает наиболее полное покрытие кода, по сравнения с методами
динамической верификации, только в том случае, если верифицируемая программа не
содержит участков динамически – генерируемого кода. Методы статического анализа не
зависят от используемого компилятора и среды, что позволяет находить скрытые ошибки,
ошибки не определённого поведения программы, легко обнаруживает опечатки в тексте
программы и ошибки, вызванные вставкой и копирования различных частей кода. Но при
этом статический анализ слабо эффективен в диагностике ошибок, связанных с утечкой
памяти, и имеет особенность генерировать большое количество ложных срабатываний
помечая все подозрительные места в тексте программы. Тем не менее современные
методы обладают высокой точностью и полнотой анализа. Данный метод позволяет
определять такие ошибки как:
 Неопределенное поведения программы – неинициализированные переменные;
 Обращение к NULL указателям;
 Нарушение правил и алгоритмов пользования библиотекой;
 Сценарии, приводящие к недокументированному поведению программы;
 Переполнение буфера;
 Сценарии мешающие кросс – платформенности;
 Ошибки, возникающие в повторяющемся коде;
 Ошибки форматных строк;
 Ошибки при использовании стандартных библиотек.
Верификация методом статического анализа наиболее эффективна на этапе
конструирования ПО, так как статический анализ применим к исходному тексту
программы и не подразумевает ее выполнения, это позволяет существенно снизить
стоимость проекта и повысить его надежность. Инструменты автоматической
верификации на основе статического анализа применяются достаточно широко, поскольку
удобны и просты в использовании и не требуют специальной подготовки программы. 

Анализ опорной модели ISO/IEC 12207:2008

ISO/IEC 12207:2008 Systems and software engineering — Software life cycle processes — стандарт ISO, описывающий процессы жизненного цикла программного обеспечения.
Стандарт разработан подкомитетом ПК 7 «Системная и программная инженерия» (англ. SC 7 System and Software Engineering) Совместного технического комитета №1 ИСО/МЭК «Информационные технологии» (англ. ISO/IEC JTC 1 Information Technology).
Данный стандарт, используя устоявшуюся терминологию, устанавливает общую структуру процессов жизненного цикла программных средств, на которую можно ориентироваться в программной индустрии. Стандарт определяет процессы, виды деятельности и задачи, которые используются при приобретении программного продукта или услуги, а также при поставке, разработке, применении по назначению, сопровождении и прекращении применения программных продуктов.

Развитие стандарта:
Стандарт ISO/IEC 12207 был опубликован 1 августа 1995 года и явился первым международным стандартом, содержавшим представительный набор процессов ЖЦ, действий и задач в отношении ПО, которое рассматривалось как часть большей системы, а также применительно к программным продуктам и услугам. За стандартом ISO/IEC 12207 в ноябре 2002 года последовал стандарт ISO/IEC 15288, посвященный процессам ЖЦ систем. Широта применения ПС привела к тому, что ПО и процессы его разработки не могли рассматриваться в отрыве от систем, но только как составная часть системы и процесса её создания. В Дополнениях к стандарту ISO/IEC 12207 были введены цель процесса и его выходы и определена эталонная модель процесса, отвечающая требованиям стандарта ISO/IEC 15504-2. Международный стандарт ISO/IEC 12207:2008, представляет собой переработанные и исправленные дополнения к стандарту ISO/IEC 12207 и является первым шагом в стратегии SC7 по гармонизации спецификаций, имеющей целью создание полностью интегрированного набора процессов ЖЦ систем и программных средств и руководства по их применению.

Главные особенности редакции 2008 года:
•	включает и развивает положения Дополнений 2002 г. и 2004 г.
•	использует терминологию, согласованную со стандартом ISO/IEC 15288:2008;
•	по возможности использует наименование и структуру процессов аналогичную той, что содержится в стандарте ISO/IEC 15288:2008;
•	дает возможность сообществу пользователей получить полностью гармонизированные стандарты и обеспечивает стабильность - стандарт в максимальной мере совместим с прошлыми редакциями;
•	использует результаты десятилетнего опыта разработки и применения стандартов ISO/IEC 12207 и ISO/IEC 15288.

По ISO 12207 к верификации имеют отношение 5 процессов: обеспечение
качества (quality assurance), собственно верификация, валидация, совместные
экспертизы (joint review) и аудит (audit). Тестирование целиком отнесено к
валидации. Кроме того, выделен процесс разрешения проблем (problem
resolution), для которого верификация и валидация поставляют входные данные
(те самые проблемы).
